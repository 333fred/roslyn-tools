<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project>
  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <AutoGenerateBindingRedirects Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">true</AutoGenerateBindingRedirects>
    <_TestTargetName Condition="'$(TargetFrameworks)' == ''">InnerTest</_TestTargetName>
    <_TestTargetName Condition="'$(TargetFrameworks)' != ''">OuterTest</_TestTargetName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TestArchitectures)' == ''">
    <TestArchitectures>$(PlatformTarget)</TestArchitectures>
    <TestArchitectures Condition="'$(PlatformTarget)' == '' or '$(PlatformTarget)' == 'AnyCpu'">x64</TestArchitectures>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="$(_TestTargetName)" Condition="'$(IsUnitTestProject)' == 'true'" />
  <Target Name="IntegrationTest" DependsOnTargets="$(_TestTargetName)" Condition="'$(IsIntegrationTestProject)' == 'true'" />

  <ItemGroup>
    <_TestArchitectureItems Include="$(TestArchitectures)" />
  </ItemGroup>
          
  <!-- Using Inputs/Outputs just to loop over test architectures -->
  <Target Name="InnerTest" Inputs="*%(_TestArchitectureItems.Identity)" Outputs="*%(_TestArchitectureItems.Identity)" Returns="@(_FailedTestRuns)">
    
    <PropertyGroup>
      <_TestArchitecture>%(_TestArchitectureItems.Identity)</_TestArchitecture>
      <_TestEnvironment>$(TargetFramework)|$(_TestArchitecture)</_TestEnvironment>
      <_TestOutPathNoExt>$(ArtifactsTestResultsDir)$(MSBuildProjectName)_$(TargetFramework)_$(_TestArchitecture)</_TestOutPathNoExt>
      <_TestStdOutPath>$(_TestOutPathNoExt).log</_TestStdOutPath>
      <_TestLogPath>$(_TestOutPathNoExt).xml</_TestLogPath>
      <_TargetFileNameNoExt>$([System.IO.Path]::GetFileNameWithoutExtension('$(TargetFileName)'))</_TargetFileNameNoExt>
      <_CoreRuntimeConfigPath>$(TargetDir)$(_TargetFileNameNoExt).runtimeconfig.json</_CoreRuntimeConfigPath>
      <_CoreDepsPath>$(TargetDir)$(_TargetFileNameNoExt).deps.json</_CoreDepsPath>
      <_RunOnCore>false</_RunOnCore>
      <_RunOnCore Condition="'$(TestUsingDotNetCli)' == 'true' and $(TargetFramework.StartsWith('netcoreapp'))">true</_RunOnCore>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_RunOnCore)' == 'true'">
      <_TestRunnerCommand>"$(DotNetTool)" exec --depsfile "$(_CoreDepsPath)" --runtimeconfig "$(_CoreRuntimeConfigPath)" "$(NuGetPackageRoot)xunit.runner.console\$(XUnitVersion)\tools\netcoreapp1.0\xunit.console.dll" "$(TargetPath)" -noautoreporters -xml "$(_TestLogPath)"</_TestRunnerCommand>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_RunOnCore)' != 'true'">
      <_XUnitConsoleExe>xunit.console.exe</_XUnitConsoleExe>
      <_XUnitConsoleExe Condition="'$(_TestArchitecture)' == 'x86'">xunit.console.x86.exe</_XUnitConsoleExe>
      <_TestRunnerCommand>"$(NuGetPackageRoot)xunit.runner.console\$(XUnitVersion)\tools\net452\$(_XUnitConsoleExe)" "$(TargetPath)" -verbose -xml "$(_TestLogPath)"</_TestRunnerCommand>
    </PropertyGroup>

    <MakeDir Directories="$(ArtifactsTestResultsDir)"/>
    <Delete Files="$(_TestOutPathNoExt)" />
    <Delete Files="$(_TestStdOutPath)" />

    <Message Text="Running tests: $(TargetPath) [$(_TestEnvironment)]" Importance="high"/>

    <Exec Command='$(_TestRunnerCommand) > $(_TestStdOutPath)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(OutDir)"
          IgnoreExitCode="true">

      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <WriteLinesToFile File="$(_TestStdOutPath)" Overwrite="false" Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)" />

    <ItemGroup>
      <_FailedTestRuns Include="$(_TestEnvironment)" Condition="'$(_TestErrorCode)' != '0'" />
    </ItemGroup>

    <PropertyGroup>
      <_TestResultMessage Condition="'$(_TestErrorCode)' == '0'">Tests succeeded: $(TargetPath) [$(_TestEnvironment)]</_TestResultMessage>
      <_TestResultMessage Condition="'$(_TestErrorCode)' != '0'">Tests failed: $(TargetPath) [$(_TestEnvironment)]; $(_TestStdOutPath)</_TestResultMessage>
    </PropertyGroup>
    
    <Message Text="$(_TestResultMessage)" Condition="'$(_TestErrorCode)' == '0'" Importance="high"/>
    <Warning Text="$(_TestResultMessage)" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' != ''" />
    <Error Text="$(_TestResultMessage)" Condition="'$(_TestErrorCode)' != '0' and '$(TargetFrameworks)' == ''" />
  </Target>
  
  <Target Name="OuterTest" Returns="@(InnerOutput)">
    <ItemGroup>
      <_TargetFramework Include="$(TargetFrameworks)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)"
             Condition="'$(TargetFrameworks)' != '' "
             Targets="InnerTest"
             Properties="TargetFramework=%(_TargetFramework.Identity)">
      <Output ItemName="_FailedTestRuns" TaskParameter="TargetOutputs" />
    </MSBuild>

    <Error Text="Tests failed on platforms: @(_FailedTestRuns, ', ')" Condition="'@(_FailedTestRuns)' != ''" />
  </Target>

  <!-- 
    In order to leverage LUT testing we need to have both of the following packages in 
    our build.  

        - xunit.runner.console
        - xunit.runner.visualstudio

    Both of these include xunit.abstractions.dll in different forms: reference and "none"
    respectively.  This creates a double write violation in our build.  The content item
    is unnecessary for us since we reference the xunit package hence remove it here. 

    https://github.com/dotnet/roslyn/issues/18753
  -->
  <Target Name="RemoveDuplicateXUnitContent">
    <ItemGroup>
      <None Remove="@(None)" Condition="'%(Filename)%(Extension)' == 'xunit.abstractions.dll'" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <PrepareForBuildDependsOn>RemoveDuplicateXUnitContent;$(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
  </PropertyGroup>
</Project>