<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project DefaultTargets="Execute">
  <!--
  
  Required parameters:
    SolutionPath      Path to the solution to build
  
  Optional parameters:
    Configuration     Build configuration: "Debug", "Release", etc.
    CIBuild           "true" when building on CI server
    Restore           "true" to restore toolset and solution
    Build             "true" to build solution
    Rebuild           "true" to rebuild solution
    Deploy            "true" to deploy assets (e.g. VSIXes)
    Test              "true" to run tests
    IntegrationTest   "true" to run integration tests
    Sign              "true" to sign built binaries
    Pack              "true" to build NuGet packages and VS insertion manifests
    Properties        List of properties to pass to each build phase ("Name=Value;Name=Value;...")
  -->

  <!-- 
    Import Directory.Build.props file next to or above the solution file.
    We expect this file to define dependency versions, NuGetPackageRoot and SignToolDataPath.
  -->
  <PropertyGroup>
    <_DirectoryBuildPropsFile>Directory.Build.props</_DirectoryBuildPropsFile>
    <_DirectoryBuildPropsBasePath>$([MSBuild]::GetDirectoryNameOfFileAbove('$(SolutionPath)', '$(_DirectoryBuildPropsFile)'))</_DirectoryBuildPropsBasePath>
    <DirectoryBuildPropsPath>$([System.IO.Path]::Combine('$(_DirectoryBuildPropsBasePath)', '$(_DirectoryBuildPropsFile)'))</DirectoryBuildPropsPath>
  </PropertyGroup>

  <Import Project="$(DirectoryBuildPropsPath)"/>
  <Import Project="RepoLayout.props"/>
  <Import Project="DefaultVersions.props"/>

  <Target Name="Execute">
    <PropertyGroup>
      <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
      <Props>$(Properties);Configuration=$(Configuration);CIBuild=$(CIBuild);__DeployProjectOutput=$(Deploy)</Props>

      <_QuietRestore>false</_QuietRestore>
      <_QuietRestore Condition="'$(CIBuild)' != 'true' and '$(RepoToolsetQuietRestore)' == 'true'">true</_QuietRestore>
    </PropertyGroup>

    <ItemGroup>
      <PreSignTargets Include="Restore" Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' != 'true'" />
      <PreSignTargets Include="Rebuild" Condition="'$(Rebuild)' == 'true'" />
      <PreSignTargets Include="Build" Condition="'$(Build)' == 'true' and '$(Rebuild)' != 'true'" />
      <!-- Deploy target is set up to chain after Build so that F5 in VS works. -->
      <PreSignTargets Include="Test" Condition="'$(Test)' == 'true'" />
      <PreSignTargets Include="IntegrationTest" Condition="'$(IntegrationTest)' == 'true'" />
    </ItemGroup>

    <ItemGroup>
      <RestoreToolsProp Include="BaseIntermediateOutputPath=$(ArtifactsToolsetDir)Common"/>
      <RestoreToolsProp Include="ExcludeRestorePackageImports=true"/>
      <RestoreToolsProp Include="UsingToolVSSDK=$(UsingToolVSSDK)"/>
      <RestoreToolsProp Include="RoslynToolsMicrosoftSignToolVersion=$(RoslynToolsMicrosoftSignToolVersion)"/>
      <RestoreToolsProp Include="MicroBuildPluginsSwixBuildVersion=$(MicroBuildPluginsSwixBuildVersion)"/>
      <RestoreToolsProp Include="MicroBuildCoreVersion=$(MicroBuildCoreVersion)"/>
      <RestoreToolsProp Include="RoslynToolsMicrosoftModifyVsixManifestVersion=$(RoslynToolsMicrosoftModifyVsixManifestVersion)"/>
    </ItemGroup>

    <!--
      Workaround for https://github.com/NuGet/Home/issues/4695.
      We launch a new msbuild process to restore.
    -->
    <ItemGroup>
      <_PropsItems Include="$(Props)" />
      <_PropsArgs Include="@(_PropsItems->'/p:%(Identity)')" />
      <_RestoreToolsPropArgs Include="@(RestoreToolsProp->'/p:%(Identity)')" />
    </ItemGroup>

    <PropertyGroup>
      <_PropsCmdLine>@(_PropsCmd, ' ')</_PropsCmdLine>
      <_RestoreToolsPropsCmdLine>@(_RestoreToolsPropArgs, ' ')</_RestoreToolsPropsCmdLine>
    </PropertyGroup>

    <Message Text="Restoring packages ..." Importance="high" Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" />
    
    <MakeDir Directories="$(ArtifactsLogDir)" Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" />
    
    <Exec Command='"$(MSBuildBinPath)\MSBuild.exe" "$(MSBuildProjectDirectory)\Tools.proj" /bl:"$(ArtifactsLogDir)RestoreRepoTools.binlog" /nologo /m /v:quiet /t:Restore /nodeReuse:false $(_RestoreToolsPropsCmdLine)'
          Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" StandardOutputImportance="normal" />

    <Exec Command='"$(MSBuildBinPath)\MSBuild.exe" "$(SolutionPath)" /bl:"$(ArtifactsLogDir)Restore.binlog" /nologo /m /v:quiet /t:Restore /nodeReuse:false $(_PropsCmdLine) /p:__BuildPhase=PreSign'
          Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' == 'true'" StandardOutputImportance="normal" />

    <!--
      Note: msbuild caches the metaproject for the solution (see https://github.com/Microsoft/msbuild/issues/1695)
      We invalidate the cache by changing the value of __BuildPhase property.
    -->

    <MSBuild Projects="Tools.proj"
             Targets="Restore"
             Properties="@(RestoreToolsProp)" 
             Condition="'$(Restore)' == 'true' and '$(_QuietRestore)' != 'true'"/>

    <MSBuild Projects="$(SolutionPath)"
             Properties="$(Props);__BuildPhase=PreSign"
             Targets="@(PreSignTargets)"
             BuildInParallel="true"
             Condition="'@(PreSignTargets)' != ''"/>

    <!-- 
      Since multiple projects may contribute to a single insertion component
      we need to package them in a separate phase.

      VSIX packages that are inserted are updated (experimental flag is removed), 
      so we need to do that before signing.
      
      TODO: Consider moving to solution Build phase
    -->
    <MSBuild Projects="VisualStudio.Insertion.proj"
             Properties="$(Props);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath)"
             Targets="PrePack"
             Condition="'$(Pack)' == 'true' and '$(UsingToolVSSDK)' == 'true'"/>

    <MSBuild Projects="Sign.proj"
             Properties="$(Props);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath)"
             Targets="Sign"
             Condition="'$(Sign)' == 'true'"/>

    <!-- 
      It is important to skip the build (NoBuild=true) when creating NuGet packages.
      Otherwise, if the output binaries were real-signed in the previous step the Build task 
      overwrite the signed files with the ones from obj dir.
    -->
    <MSBuild Projects="$(SolutionPath)"
             Properties="$(Props);NoBuild=true;__BuildPhase=PostSign"
             Targets="Pack"
             BuildInParallel="true"
             Condition="'$(Pack)' == 'true'"/>

    <!-- 
      Insertion manifests (vsman files) contain hashes of the referenced VSIXes.
      These need to be calculated using signed VSIXes.
      In previous step (Pack on the solution) might have produced additional VSIXes that need to be inserted.
      Hence we need to run this task after both signing and packaging is done on the solution.
    -->
    <MSBuild Projects="VisualStudio.Insertion.proj"
             Properties="$(Props);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath)"
             Targets="Pack"
             Condition="'$(Pack)' == 'true' and '$(UsingToolVSSDK)' == 'true'"/>
  </Target>
</Project>