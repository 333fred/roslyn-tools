<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project DefaultTargets="Execute">
  <!--
  
  Required parameters:
    SolutionPath      Path to the solution to build
  
  Optional parameters:
    Configuration     Build configuration: "Debug", "Release", etc.
    CIBuild           "true" when building on CI server
    Restore           "true" to restore toolset and solution
    Build             "true" to build solution
    Rebuild           "true" to rebuild solution
    Deploy            "true" to deploy assets (e.g. VSIXes)
    Test              "true" to run tests
    IntegrationTest   "true" to run integration tests
    Sign              "true" to sign built binaries
    Pack              "true" to build NuGet packages
    Properties        List of properties to pass to each build phase ("Name=Value;Name=Value;...")
    
  -->

  <!-- 
    Import Directory.Build.props file next to or above the solution file.
    We expect this file to define dependency versions, NuGetPackageRoot and SignToolDataPath.
  -->
  <PropertyGroup>
    <_DirectoryBuildPropsFile>Directory.Build.props</_DirectoryBuildPropsFile>
    <_DirectoryBuildPropsBasePath>$([MSBuild]::GetDirectoryNameOfFileAbove('$(SolutionPath)', '$(_DirectoryBuildPropsFile)'))</_DirectoryBuildPropsBasePath>
    <DirectoryBuildPropsPath>$([System.IO.Path]::Combine('$(_DirectoryBuildPropsBasePath)', '$(_DirectoryBuildPropsFile)'))</DirectoryBuildPropsPath>
  </PropertyGroup>

  <Import Project="$(DirectoryBuildPropsPath)"/>
  <Import Project="RepoLayout.props"/>
  <Import Project="DefaultVersions.props"/>

  <Target Name="Execute">
    <PropertyGroup>
      <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
      <Props>$(Properties);Configuration=$(Configuration);CIBuild=$(CIBuild);__DeployProjectOutput=$(Deploy)</Props>
    </PropertyGroup>

    <ItemGroup>
      <PreSignTargets Include="Restore" Condition="'$(Restore)' == 'true'" />
      <PreSignTargets Include="Rebuild" Condition="'$(Rebuild)' == 'true'" />
      <PreSignTargets Include="Build" Condition="'$(Build)' == 'true' and '$(Rebuild)' != 'true'" />
      <!-- Deploy target is set up to chain after Build so that F5 in VS works. -->
      <PreSignTargets Include="Test" Condition="'$(Test)' == 'true'" />
      <PreSignTargets Include="IntegrationTest" Condition="'$(IntegrationTest)' == 'true'" />
    </ItemGroup>

    <ItemGroup>
      <RestoreToolsProp Include="BaseIntermediateOutputPath=$(ArtifactsToolsetDir)Common"/>
      <RestoreToolsProp Include="ExcludeRestorePackageImports=true"/>
      <RestoreToolsProp Include="UsingToolVSSDK=$(UsingToolVSSDK)"/>
      <RestoreToolsProp Include="RoslynToolsMicrosoftSignToolVersion=$(RoslynToolsMicrosoftSignToolVersion)"/>
      <RestoreToolsProp Include="MicroBuildCoreVersion=$(MicroBuildCoreVersion)"/>
      <RestoreToolsProp Include="MicroBuildPluginsSwixBuildVersion=$(MicroBuildPluginsSwixBuildVersion)"/>
      <RestoreToolsProp Include="MicrosoftNetCompilersVersion=$(MicrosoftNetCompilersVersion)"/>
    </ItemGroup>
    
    <!--
      Note: msbuild caches the metaproject for the solution (see https://github.com/Microsoft/msbuild/issues/1695)
      We invalidate the cache by changing the value of __BuildPhase property.
    -->

    <MSBuild Projects="Tools.proj"
             Targets="Restore"
             Properties="@(RestoreToolsProp)" 
             Condition="'$(Restore)' == 'true'"/>

    <MSBuild Projects="$(SolutionPath)"
             Properties="$(Props);__BuildPhase=PreSign"
             Targets="@(PreSignTargets)"
             BuildInParallel="true"
             Condition="'@(PreSignTargets)' != ''"/>

    <MSBuild Projects="Sign.proj"
             Properties="$(Props);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath)"
             Targets="Sign"
             BuildInParallel="true"
             Condition="'$(Sign)' == 'true'"/>

    <!-- 
      It is important to skip the build (NoBuild=true) when creating NuGet packages.
      Otherwise, if the output binaries were real-signed in the previous step the Build task 
      overwrite the signed files with the ones from obj dir.
    -->
    <MSBuild Projects="$(SolutionPath)"
             Properties="$(Props);NoBuild=true;__BuildPhase=PostSign"
             Targets="Pack"
             BuildInParallel="true"
             Condition="'$(Pack)' == 'true'"/>

    <!-- 
      Since multiple projects may contribute to a single insertion component
      we need to package them in a separate phase.
    -->
    <MSBuild Projects="VisualStudio.Insertion.Pack.proj"
             Properties="$(Props);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath)"
             Targets="Pack"
             BuildInParallel="true"
             Condition="'$(Pack)' == 'true' and '$(UsingToolVSSDK)' == 'true'"/>
  </Target>
</Project>