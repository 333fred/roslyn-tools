<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project InitialTargets="RestoreToolsetCheck" TreatAsLocalProperty="OutDir" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <SolutionDir>$(MSBuildThisFileDirectory)..\..\</SolutionDir>
    <NuGetToolPath>$(SolutionDir)NuGet.exe</NuGetToolPath>
    <ToolsetPackagesDir>$(SolutionDir)build\Toolset\</ToolsetPackagesDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Respect environment variable for the NuGet Packages Root if set; otherwise, use the current default location -->
    <NuGetPackageRoot Condition="'$(NuGetPackageRoot)' == ''">$(NUGET_PACKAGES)</NuGetPackageRoot> <!-- Respect environment variable if set -->
    <NuGetPackageRoot Condition="'$(NuGetPackageRoot)' == ''">$(UserProfile)\.nuget\packages</NuGetPackageRoot>
  </PropertyGroup>

  <!-- Import the global NuGet packages -->
  <PropertyGroup>
    <ToolsetCompilerPackageName>Microsoft.Net.Compilers</ToolsetCompilerPackageName>
    <ToolsetCompilerPackageVersion>2.0.0-rc2-61110-03</ToolsetCompilerPackageVersion>
    <ToolsetCompilerPropsFilePath>$(NuGetPackageRoot)\$(ToolsetCompilerPackageName)\$(ToolsetCompilerPackageVersion)\build\Microsoft.Net.Compilers.props</ToolsetCompilerPropsFilePath>
  </PropertyGroup>

  <PropertyGroup>
    <XUnitConsoleRunnerPackageName>xunit.runner.console</XUnitConsoleRunnerPackageName>
    <XUnitConsoleRunnerPackageVersion>2.2.0-beta4-build3444</XUnitConsoleRunnerPackageVersion>
    <XUnitConsoleRunnerExeFilePath>$(NuGetPackageRoot)\$(XUnitConsoleRunnerPackageName)\$(XUnitConsoleRunnerPackageVersion)\tools\xunit.console.x86.exe</XUnitConsoleRunnerExeFilePath>
  </PropertyGroup>

  <Target Name="RestoreToolsetCheck" Condition="'$(BuildingProject)' == 'true'">
      <Error Text="Toolset packages have not been restored, run Restore.cmd before building"
             Condition="!Exists('$(ToolsetCompilerPropsFilePath)') or !Exists('$(XUnitConsoleRunnerExeFilePath)')" />
  </Target>

  <!-- This file is imported by all projects at the beginning of the project files -->
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <PropertyGroup>
    <MicrosoftVSSDKVersion>15.0.25929-RC2</MicrosoftVSSDKVersion>
    <MSBuildVersion Condition="'$(MSBuildVersion)' == ''">15.1</MSBuildVersion>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">15.0</VisualStudioVersion>
    <VisualStudioReferenceMajorVersion Condition="'$(VisualStudioReferenceMajorVersion)' == ''">$(VisualStudioVersion.Substring(0, $(VisualStudioVersion.IndexOf('.'))))</VisualStudioReferenceMajorVersion>
    <VisualStudioReferenceAssemblyVersion Condition="'$(VisualStudioReferenceAssemblyVersion)' == ''">$(VisualStudioReferenceMajorVersion).0.0.0</VisualStudioReferenceAssemblyVersion>
    <VisualStudioCodename>Dev$(VisualStudioReferenceMajorVersion)</VisualStudioCodename>
    <MinimumVisualStudioVersion>$(VisualStudioVersion)</MinimumVisualStudioVersion>
  </PropertyGroup>

  <PropertyGroup>
    <VisualStudioBuildToolsNuGetPackagePath>$(NuGetPackageRoot)\Microsoft.VSSDK.BuildTools\$(MicrosoftVSSDKVersion)</VisualStudioBuildToolsNuGetPackagePath>
  </PropertyGroup>

  <Import Project="$(VisualStudioBuildToolsNuGetPackagePath)\build\Microsoft.VsSDK.BuildTools.props" />
  
  <Import Project="$(ToolsetCompilerPropsFilePath)" Condition="Exists('$(ToolsetCompilerPropsFilePath)')" />
  
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <DeployExtension Condition="'$(DeployExtension)' == ''">true</DeployExtension>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SignAssembly Condition="'$(SignAssembly)' == ''">true</SignAssembly>
    <OverwriteReadOnlyFiles Condition="'$(OverwriteReadOnlyFiles)' == ''">true</OverwriteReadOnlyFiles>
    <DeployHive Condition="'$(DeployHive)' == ''">Exp</DeployHive>
    <DeployExtension Condition="'$(VisualStudioVersion)' == '14.0'">false</DeployExtension>
  </PropertyGroup>
  
  <PropertyGroup>
    <FileAlignment>512</FileAlignment>
    <HighEntropyVA>true</HighEntropyVA>
    <Features>strict</Features>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <UseSharedCompilation>true</UseSharedCompilation>
  </PropertyGroup>
  
  <PropertyGroup>
    <WarningLevel>4</WarningLevel>
    <ErrorReport>prompt</ErrorReport>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugType>pdbonly</DebugType>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>
  
  <PropertyGroup>
    <ArtifactsDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\..\artifacts\$(Configuration)'))\</ArtifactsDir>
    <OutputPath>$(ArtifactsDir)bin\$(MSBuildProjectName)\</OutputPath>
    <IntermediateOutputPath>$(ArtifactsDir)obj\$(MSBuildProjectName)\</IntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Disable AppX packaging. Not setting this to false has the side effect that any builds of
        portable projects end up in a sub folder of $(OutputPath). Search for this flag in
        Microsoft.Common.CurrentVersion.targets to see how it is consumed -->
    <WindowsAppContainer>false</WindowsAppContainer>
  </PropertyGroup>
</Project>