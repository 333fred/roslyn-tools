// Copyright (c) Microsoft. All Rights Reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

#r "System.Xml.Linq"
using System.Xml.Linq;
using System.Globalization;

const int maxDocCommentLength = 256;

string languageStr = Args[0];
string resxFile = Args[1];
string resourceName = Args[2];
string sourceOutputPath = Args[3];

string namespaceName;
string className;

string[] nameParts = resourceName.Split('.');
if (nameParts.Length == 1)
{
    namespaceName = null;
    className = nameParts[0];
}
else
{
    namespaceName = string.Join(".", nameParts, 0, nameParts.Length - 1);
    className = nameParts.Last();
}

bool cs = false, vb = false;
switch (languageStr.ToUpperInvariant())
{
    case "C#": cs = true; break;
    case "VB": vb = true; break;
    default: throw new NotSupportedException($"GenerateResxSource doesn't support language: '{languageStr}'");
}

bool IsLetterChar(UnicodeCategory cat)
{
    // letter-character:
    //   A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl 
    //   A Unicode-escape-sequence representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl

    switch (cat)
    {
        case UnicodeCategory.UppercaseLetter:
        case UnicodeCategory.LowercaseLetter:
        case UnicodeCategory.TitlecaseLetter:
        case UnicodeCategory.ModifierLetter:
        case UnicodeCategory.OtherLetter:
        case UnicodeCategory.LetterNumber:
            return true;
    }

    return false;
}

string classIndent = (namespaceName == null ? "" : "    ");
string memberIndent = classIndent + "    ";

var strings = new StringBuilder();
foreach (var node in XDocument.Load(resxFile).Descendants("data"))
{
    string name = node.Attribute("name")?.Value ?? throw new InvalidDataException($"Missing resource name");
    string value = node.Elements("value").FirstOrDefault()?.Value.Trim() ?? throw new InvalidDataException($"Missing resource value: '{name}'");

    if (name == "")
    {
        throw new InvalidDataException($"Empty resource name");
    }

    if (value.Length > maxDocCommentLength)
    {
        value = value.Substring(0, maxDocCommentLength) + " ...";
    }

    string escapedTrimmedValue = new XElement("summary", value).ToString();

    foreach (var line in escapedTrimmedValue.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None))
    {
        strings.Append($"{memberIndent}{(cs ? "///" : vb ? "'''" : throw null)} ");
        strings.AppendLine(line);
    }

    string identifier = IsLetterChar(char.GetUnicodeCategory(name[0])) ? name : "_" + name;

    if (cs)
    {
        strings.AppendLine($"{memberIndent}internal static string {identifier} => ResourceManager.GetString(\"{name}\", Culture);");
    }
    else if (vb)
    {
        strings.AppendLine($"{memberIndent}Friend Shared ReadOnly Property {identifier} As String");
        strings.AppendLine($"{memberIndent}  Get");
        strings.AppendLine($"{memberIndent}    Return ResourceManager.GetString(\"{name}\", Culture)");
        strings.AppendLine($"{memberIndent}  End Get");
        strings.AppendLine($"{memberIndent}End Property");
    }
    else
    {
        throw null;
    }
}

string namespaceStart, namespaceEnd;
if (namespaceName == null)
{
    namespaceStart = namespaceEnd = null;
}
else if (cs)
{
    namespaceStart = $@"namespace {namespaceName}{Environment.NewLine}{{";
    namespaceEnd = "}" + Environment.NewLine;
}
else if (vb)
{
    namespaceStart = $"Namespace {namespaceName}";
    namespaceEnd = "End Namespace" + Environment.NewLine;
}
else
{
    throw null;
}
   
File.WriteAllText(sourceOutputPath, cs ?
$@"// <auto-generated>
using System.Reflection;

{namespaceStart}
{classIndent}internal static class {className}
{classIndent}{{
{memberIndent}internal static global::System.Globalization.CultureInfo Culture {{ get; set; }}
{memberIndent}internal static global::System.Resources.ResourceManager ResourceManager {{ get; }} = new global::System.Resources.ResourceManager(""{resourceName}"", typeof({className}).GetTypeInfo().Assembly);

{strings}
{classIndent}}}
{namespaceEnd}
" : vb ?
$@"' <auto-generated>
Imports System.Reflection

{namespaceStart}
{classIndent}Friend Class {className}
{memberIndent}Private Sub New
{memberIndent}End Sub
{memberIndent}
{memberIndent}Friend Shared Property Culture As Global.System.Globalization.CultureInfo
{memberIndent}Friend Shared ReadOnly Property ResourceManager As New Global.System.Resources.ResourceManager(""{resourceName}"", GetType({className}).GetTypeInfo().Assembly)

{strings}
{classIndent}End Class
{namespaceEnd}"
: throw null);
